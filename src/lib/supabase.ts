import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// Debug des variables d'environnement en production
console.log('üîç Debug variables d\'environnement Supabase:')
console.log('VITE_SUPABASE_URL:', supabaseUrl ? `${supabaseUrl.substring(0, 30)}...` : 'undefined')
console.log('VITE_SUPABASE_ANON_KEY:', supabaseAnonKey ? `${supabaseAnonKey.substring(0, 30)}...` : 'undefined')

// V√©rification critique de la cl√©
if (supabaseAnonKey) {
  console.log('üîê Longueur de la cl√©:', supabaseAnonKey.length)
  console.log('üîê Commence par eyJ:', supabaseAnonKey.startsWith('eyJ'))
  console.log('üîê Contient des points:', (supabaseAnonKey.match(/\./g) || []).length)
}

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes!')
  console.error('VITE_SUPABASE_URL pr√©sent:', !!supabaseUrl)
  console.error('VITE_SUPABASE_ANON_KEY pr√©sent:', !!supabaseAnonKey)
  console.warn('Mode fallback activ√© - fonctionnalit√©s limit√©es')
} else {
  console.log('‚úÖ Variables d\'environnement Supabase correctement charg√©es')
}


// Fonction de test de connectivit√© avec retry
export const testSupabaseConnection = async (retries = 3): Promise<boolean> => {
  if (!supabase) {
    console.error('‚ùå Client Supabase non initialis√©')
    return false
  }
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîç Test de connectivit√© Supabase (tentative ${attempt}/${retries})...`)
      
      // Test simple avec une requ√™te vers une table publique
      const { data, error } = await supabase
        .from('votes')
        .select('id')
        .limit(1)
      
      if (error) {
        console.error(`‚ùå Erreur tentative ${attempt}:`, error.message)
        if (attempt === retries) {
          console.error('Code:', error.code)
          console.error('D√©tails:', error.details)
          return false
        }
        // Attendre avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt))
        continue
      }
      
      console.log('‚úÖ Connectivit√© Supabase r√©ussie')
      return true
    } catch (error) {
      console.error(`‚ùå Exception tentative ${attempt}:`, error)
      if (attempt === retries) return false
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt))
    }
  }
  
  return false
}

export const supabase = supabaseUrl && supabaseAnonKey ? createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false
  },
  global: {
    headers: {
      'X-Client-Info': 'loyola-vote-app'
    }
  }
}) : null

// Types pour TypeScript
export interface Vote {
  id: string
  priority_id: string
  vote_type: 'up' | 'down'
  fingerprint: string
  ip_address?: string
  user_agent?: string
  created_at: string
  updated_at: string
}

export interface VoteStats {
  priority_id: string
  upvotes: number
  downvotes: number
  total_votes: number
}